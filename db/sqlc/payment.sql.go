// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payment.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (user_id, order_id, amount, payment_date, status) 
VALUES ($1, $2, $3, NOW(), $4) 
RETURNING id, user_id, order_id, amount, payment_date, status
`

type CreatePaymentParams struct {
	UserID  int64         `json:"user_id"`
	OrderID int64         `json:"order_id"`
	Amount  string        `json:"amount"`
	Status  PaymentStatus `json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.UserID,
		arg.OrderID,
		arg.Amount,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentDate,
		&i.Status,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, user_id, order_id, amount, payment_date, status FROM payments WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentDate,
		&i.Status,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, user_id, order_id, amount, payment_date, status FROM payments ORDER BY payment_date ASC
`

func (q *Queries) ListPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, listPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderID,
			&i.Amount,
			&i.PaymentDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPaymentsByOrder = `-- name: SearchPaymentsByOrder :many
SELECT id, user_id, order_id, amount, payment_date, status FROM payments WHERE order_id = $1 ORDER BY payment_date ASC
`

func (q *Queries) SearchPaymentsByOrder(ctx context.Context, orderID int64) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, searchPaymentsByOrder, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderID,
			&i.Amount,
			&i.PaymentDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPaymentsByStatus = `-- name: SearchPaymentsByStatus :many
SELECT id, user_id, order_id, amount, payment_date, status FROM payments WHERE status = $1 ORDER BY payment_date ASC
`

func (q *Queries) SearchPaymentsByStatus(ctx context.Context, status PaymentStatus) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, searchPaymentsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderID,
			&i.Amount,
			&i.PaymentDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPaymentsByUser = `-- name: SearchPaymentsByUser :many
SELECT id, user_id, order_id, amount, payment_date, status FROM payments WHERE user_id = $1 ORDER BY payment_date ASC
`

func (q *Queries) SearchPaymentsByUser(ctx context.Context, userID int64) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, searchPaymentsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderID,
			&i.Amount,
			&i.PaymentDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments SET 
    user_id = $2,
    order_id = $3,
    amount = $4,
    status = $5
WHERE id = $1 
RETURNING id, user_id, order_id, amount, payment_date, status
`

type UpdatePaymentParams struct {
	ID      int64         `json:"id"`
	UserID  int64         `json:"user_id"`
	OrderID int64         `json:"order_id"`
	Amount  string        `json:"amount"`
	Status  PaymentStatus `json:"status"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePayment,
		arg.ID,
		arg.UserID,
		arg.OrderID,
		arg.Amount,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentDate,
		&i.Status,
	)
	return i, err
}
