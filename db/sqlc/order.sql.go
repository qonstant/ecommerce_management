// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, total_amount, order_date, status) 
VALUES ($1, $2, NOW(), $3) 
RETURNING id, user_id, total_amount, order_date, status
`

type CreateOrderParams struct {
	UserID      int64       `json:"user_id"`
	TotalAmount string      `json:"total_amount"`
	Status      OrderStatus `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UserID, arg.TotalAmount, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalAmount,
		&i.OrderDate,
		&i.Status,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, total_amount, order_date, status FROM orders WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalAmount,
		&i.OrderDate,
		&i.Status,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, total_amount, order_date, status FROM orders ORDER BY order_date ASC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TotalAmount,
			&i.OrderDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchOrdersByStatus = `-- name: SearchOrdersByStatus :many
SELECT id, user_id, total_amount, order_date, status FROM orders WHERE status = $1 ORDER BY order_date ASC
`

func (q *Queries) SearchOrdersByStatus(ctx context.Context, status OrderStatus) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, searchOrdersByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TotalAmount,
			&i.OrderDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchOrdersByUser = `-- name: SearchOrdersByUser :many
SELECT id, user_id, total_amount, order_date, status FROM orders WHERE user_id = $1 ORDER BY order_date ASC
`

func (q *Queries) SearchOrdersByUser(ctx context.Context, userID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, searchOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TotalAmount,
			&i.OrderDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders SET 
    user_id = $2,
    total_amount = $3,
    status = $4
WHERE id = $1 
RETURNING id, user_id, total_amount, order_date, status
`

type UpdateOrderParams struct {
	ID          int64       `json:"id"`
	UserID      int64       `json:"user_id"`
	TotalAmount string      `json:"total_amount"`
	Status      OrderStatus `json:"status"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.ID,
		arg.UserID,
		arg.TotalAmount,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalAmount,
		&i.OrderDate,
		&i.Status,
	)
	return i, err
}
