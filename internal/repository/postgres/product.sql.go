// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package postgres

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, category, stock_quantity, addition_date) 
VALUES ($1, $2, $3, $4, $5, NOW()) 
RETURNING id, name, description, price, category, stock_quantity, addition_date
`

type CreateProductParams struct {
	Name          string `json:"name"`
	Description   string `json:"description"`
	Price         string `json:"price"`
	Category      string `json:"category"`
	StockQuantity int32  `json:"stock_quantity"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Category,
		arg.StockQuantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.StockQuantity,
		&i.AdditionDate,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price, category, stock_quantity, addition_date FROM products WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.StockQuantity,
		&i.AdditionDate,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, category, stock_quantity, addition_date FROM products ORDER BY addition_date ASC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Category,
			&i.StockQuantity,
			&i.AdditionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProductsByCategory = `-- name: SearchProductsByCategory :many
SELECT id, name, description, price, category, stock_quantity, addition_date FROM products WHERE category = $1 ORDER BY addition_date ASC
`

func (q *Queries) SearchProductsByCategory(ctx context.Context, category string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, searchProductsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Category,
			&i.StockQuantity,
			&i.AdditionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProductsByName = `-- name: SearchProductsByName :many
SELECT id, name, description, price, category, stock_quantity, addition_date FROM products WHERE name ILIKE '%' || $1 || '%' ORDER BY addition_date ASC
`

func (q *Queries) SearchProductsByName(ctx context.Context, dollar_1 sql.NullString) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, searchProductsByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Category,
			&i.StockQuantity,
			&i.AdditionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products SET 
    name = $2,
    description = $3,
    price = $4,
    category = $5,
    stock_quantity = $6
WHERE id = $1 
RETURNING id, name, description, price, category, stock_quantity, addition_date
`

type UpdateProductParams struct {
	ID            int64  `json:"id"`
	Name          string `json:"name"`
	Description   string `json:"description"`
	Price         string `json:"price"`
	Category      string `json:"category"`
	StockQuantity int32  `json:"stock_quantity"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Category,
		arg.StockQuantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.StockQuantity,
		&i.AdditionDate,
	)
	return i, err
}

const updateProductStock = `-- name: UpdateProductStock :one
UPDATE products
SET stock_quantity = stock_quantity - $1
WHERE id = $2
RETURNING id, name, description, price, category, stock_quantity, addition_date
`

type UpdateProductStockParams struct {
	StockQuantity int32 `json:"stock_quantity"`
	ID            int64 `json:"id"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductStock, arg.StockQuantity, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.StockQuantity,
		&i.AdditionDate,
	)
	return i, err
}
